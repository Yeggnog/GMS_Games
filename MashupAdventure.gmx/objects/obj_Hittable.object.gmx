<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy_L</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

x_spd = 0;
y_spd = 0;
facing = 0;
hurt = false;
hurt_timer = 0;
hurt_flash = false;
knock = 0;
hp = 200;
maxHP = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// updates

// update flash
/*if(hurt_flash){
    hurt_flash = false;
}*/

// hit
if(place_meeting(x,y,obj_Avion_Slash) &amp;&amp; !hurt){
    var othr = instance_place(x,y,obj_Avion_Slash);
    hurt = true;
    if(hp &gt; 0){
        hp -= 1;
    }else{
        instance_destroy();
    }
    hurt_timer = 1;
    hurt_flash = true;
    if(obj_Avion.attack == 3){
        y_spd = -8;
    }else{
        y_spd = -3;
    }
    // sprite_update
    if(facing == 0){
        knock = -(othr.knock);
        sprite_index = spr_Enemy_Hurt_R;
    }else{
        knock = othr.knock;
        sprite_index = spr_Enemy_Hurt_L;
    }
}

// gravity
if(!place_meeting(x,y+y_spd,obj_Omni_Solid) &amp;&amp; !place_meeting(x,y+1,obj_Omni_Solid)){
    if(y_spd &lt; 8){
        y_spd += 1;
    }
}else if(y_spd &gt; 0){
    y_spd = 0;
}


// collisions
while(place_meeting(x+x_spd,y,obj_Omni_Solid) &amp;&amp; x_spd != 0){
    if(x_spd &lt; 0){
        x_spd += 1;
    }
    if(x_spd &gt; 0){
        x_spd -= 1;
    }
}
if(place_meeting(x,y+y_spd,obj_Omni_Solid)){
    // land
    while(place_meeting(x,y+y_spd,obj_Omni_Solid) &amp;&amp; y_spd != 0){
        if(y_spd &lt; 0){
            y_spd += 1;
        }
        if(y_spd &gt; 0){
            y_spd -= 1;
        }
    }
    if(!hurt){
        if(facing == 0){
            sprite_index = spr_Enemy_R;
        }else{
            sprite_index = spr_Enemy_L;
        }
    }
}

// move position
x += x_spd + knock;
y += y_spd;

// push out
if(place_meeting(x,y,obj_Omni_Solid)){
    var othr = instance_place(x,y,obj_Omni_Solid);
    var dir = point_direction(othr.x+8,othr.y+8,x,y);
    x += round(lengthdir_x(2,dir));
    y += round(lengthdir_y(2,dir));
}

// hurt timer
if(hurt){
    if(hurt_timer &gt; 0){
        hurt_timer -= 1;
    }else{
        hurt_flash = false;
        hurt = false;
        knock = 0;
        if(!place_meeting(x,y+1,obj_Omni_Solid)){
            if(facing == 0){
                sprite_index = spr_Enemy_R;
            }else{
                sprite_index = spr_Enemy_L;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw with flash

if(hurt_flash){
    shader_set(ColorMask);
    var col = shader_get_uniform(ColorMask,"in_Colour_actual");
    shader_set_uniform_f(col,255.0,255.0,255.0,1.0);
    draw_self();
    shader_reset();
}else{
    draw_self();
}

// health bar?
/*draw_set_color(c_black);
draw_rectangle(x-(maxHP/2),y+4,x+(maxHP/2),y+6,false);
draw_set_color(c_red);
draw_rectangle(x-(maxHP/2),y+4,x-(maxHP/2)+(20*(hp/maxHP)),y+6,false);
draw_set_color(c_black);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
