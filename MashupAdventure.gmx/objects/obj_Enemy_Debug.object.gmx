<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Ari_L</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set up variables

// movement
x_spd = 0; x_spd_base = 0; x_accel = 0;
y_spd = 0; y_spd_base = 0; y_accel = 0;
knocked = 0; dashing = false;
move_dir = 0;
facing = 180;

// combat
HP_actual = 80;
dmg_recover = 10; dmg_recover_temp = 0;
combo_timer = 0; combo_timer_toggle = false;
temp_combo = 0; atk_timer = 0;
beam_ded = 0; beam_ded_temp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for hit
if(place_meeting(x,y,obj_Fight_Atk_Parent)){
    var temp = instance_place(x,y,obj_Fight_Atk_Parent);
    if(temp.side != 1){
        // get hit
        HP_actual -= temp.dmg;
        if(facing == 180){
            if(sprite_index != spr_Ari_Hit_L){
                sprite_index = spr_Ari_Hit_L;
            }
        }//else{
            //right facing
        //}
        if(temp.knock &gt; 0){
            // knockback
            knocked = 2;
            if(facing == 0){
                x_accel -= temp.knock;
            }else{
                x_accel += temp.knock;
            }
            if(temp.knock &gt; 4){
                part_particles_create(part_system_Fight,x,y,type_burst,10);
            }
        }else{
            knocked = 1;
        }
        if(temp.object_index != obj_BeamEnd){
            with(temp){
                instance_destroy();
            }
        }else if(HP_actual &lt;= 0){
            if(beam_ded == 0){
                beam_ded = 1;
            }
        }
    }
}

// check HP
if(HP_actual &lt;= 0){
    if(beam_ded == 0){
        instance_destroy();
    }else{
        // lerp for beam fade
        if(beam_ded_temp &lt; sprite_width){
            beam_ded_temp += 2;
        }else{
            beam_ded_temp = 0;
            if(beam_ded &lt; 2){
                beam_ded += 1;
            }else{
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update coords
x_spd = x_spd_base + x_accel;
y_spd = y_spd_base + y_accel;
if(x_spd &lt; 0 &amp;&amp; x &gt;= (abs(x_spd)+4)){
    x += x_spd;
}
if(x_spd &gt; 0 &amp;&amp; x &lt;= (room_width-(abs(x_spd)+4))){
    x += x_spd;
}
if(y_spd &lt; 0 &amp;&amp; y &gt;= (abs(y_spd)+6)){
    y += y_spd;
}
if(y_spd &gt; 0 &amp;&amp; y &lt;= (room_height-(abs(y_spd)+13))){
    y += y_spd;
}

// update accel
if(x_accel &gt; 0){
    x_accel -= 1;
}else if(x_accel &lt; 0){
    x_accel += 1;
}
if(y_accel &gt; 0){
    y_accel -= 1;
}else if(y_accel &lt; 0){
    y_accel += 1;
}

// update hit recovery
if(knocked == 1){
    if(dmg_recover_temp &lt; dmg_recover){
        dmg_recover_temp += 1;
    }else{
        dmg_recover_temp = 0;
        knocked = 0;
    }
}
if(knocked == 2 &amp;&amp; x_accel == 0){
    if(dmg_recover_temp &lt; dmg_recover){
        dmg_recover_temp += 1;
    }else{
        dmg_recover_temp = 0;
        knocked = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sprite

// standing
if(knocked == 0 &amp;&amp; beam_ded == 0){
    if(sprite_index != spr_Ari_L){
        sprite_index = spr_Ari_L;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(beam_ded == 0){
    draw_self();
}else{
    // epic beam fade thing
    shader_set(Scanline);
    var tempid = shader_get_uniform(Scanline,"in_Colour_actual");
    var pixelW = shader_get_uniform(Scanline,"pixelW");
    var pixelH = shader_get_uniform(Scanline,"pixelH");
    var spacing = shader_get_uniform(Scanline,"spacing");
    shader_set_uniform_f(tempid,32.0,32.0,32.0,1.0);
    shader_set_uniform_f(pixelW,texture_get_texel_width(sprite_get_texture(sprite_index,0)));
    shader_set_uniform_f(pixelH,texture_get_texel_height(sprite_get_texture(sprite_index,0)));
    shader_set_uniform_f(spacing,1.0);
    if(beam_ded == 1){
        if(facing == 180){
            draw_sprite_part(sprite_index,image_index,0,0,beam_ded_temp,sprite_height,x-6,y-10);
        }else{
            draw_sprite_part(sprite_index,image_index,sprite_width-beam_ded_temp,0,beam_ded_temp,sprite_height,x-6+sprite_width-beam_ded_temp,y-10);
        }
    }else if(beam_ded == 2){
        if(facing == 180){
            draw_sprite_part(sprite_index,image_index,beam_ded_temp,0,sprite_width-beam_ded_temp,sprite_height,x-6+beam_ded_temp,y-10);
        }else{
            draw_sprite_part(sprite_index,image_index,0,0,sprite_width-beam_ded_temp,sprite_height,x-6,y-10);
        }
    }
    shader_set_uniform_f(tempid,255,255,255,1.0);
    shader_reset();
    if(beam_ded == 1){
        shader_set(ColorMask);
        var tempid = shader_get_uniform(ColorMask,"in_Colour_actual");
        shader_set_uniform_f(tempid,32.0,32.0,32.0,1.0);
        // residual
        if(facing == 180){
            draw_sprite_part(sprite_index,image_index,beam_ded_temp,0,sprite_width-beam_ded_temp,sprite_height,x-6+beam_ded_temp,y-10);
        }else{
            draw_sprite_part(sprite_index,image_index,0,0,sprite_width-beam_ded_temp,sprite_height,x-6,y-10);
        }
        shader_set_uniform_f(tempid,255,255,255,1.0);
        shader_reset();
    }
}
//draw_text(view_xview[0]+4,view_yview[0]+view_hview[0]-37,string(HP_actual));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
