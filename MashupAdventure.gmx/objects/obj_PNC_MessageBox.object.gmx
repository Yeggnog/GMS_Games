<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PNC_MessageBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup

//text_actual = "My mum's cow went down to the store and bought some eggs.";
text_actual = "";
using_top = true;
str_pos = 0;
str_pos_temp = 0;
str_pos_temp_inc = 0.5;
draw_box = false;
clip_first = true;
display_line1 = "";
display_line2 = "";
width = view_wview[0] / 8;
height = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle text, for it is unwieldly

// lerp text_display letter-by-letter
if(str_pos_temp &lt; 1){
    str_pos_temp += str_pos_temp_inc;
}else if(str_pos &lt;= string_length(text_actual)){
    if(using_top){
        if(string_length(display_line1) &gt;= width-2){
            var arr = neo_rb_parse(display_line1,width-2);
            display_line1 = arr[0];
            display_line2 = arr[1];
            using_top = false;
            display_line2 += string_copy(text_actual,str_pos,1);
        }else{
            display_line1 += string_copy(text_actual,str_pos,1);
        }
        if(clip_first){
            clip_first = false;
            display_line1 = string_copy(display_line1,1,string_length(display_line1)-1);
        }
    }else{
        if(string_length(display_line2) &gt;= width-2){
            var arr = neo_rb_parse(display_line2,width-2);
            display_line1 = arr[0];
            display_line2 = arr[1];
            display_line2 += string_copy(text_actual,str_pos,1);
        }else{
            display_line2 += string_copy(text_actual,str_pos,1);
        }
    }
    str_pos += 1;
    str_pos_temp = 0;
}else if(key_A){
    //release controls
    text_actual = "";
    str_pos = 0;
    str_pos_temp = 0;
    using_top = true;
    display_line1 = "";
    display_line2 = "";
    draw_box = false;
    if(obj_PNC_Control.tv_on){
        room_goto_next();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(draw_box){
// draw box

// corners
draw_sprite(sprite_index,3,view_xview[0],view_yview[0]+view_hview[0]-8);
draw_sprite(sprite_index,0,view_xview[0],view_yview[0]+view_hview[0]-32);
draw_sprite(sprite_index,2,view_xview[0]+view_wview[0]-8,view_yview[0]+view_hview[0]-8);
draw_sprite(sprite_index,1,view_xview[0]+view_wview[0]-8,view_yview[0]+view_hview[0]-32);
// straight
for(var i=0; i&lt;width-2; i++){
    draw_sprite(sprite_index,6,view_xview[0]+8*(i+1),view_yview[0]+view_hview[0]-32);
    draw_sprite(sprite_index,7,view_xview[0]+8*(i+1),view_yview[0]+view_hview[0]-8);
}
for(var i=0; i&lt;2; i++){
    draw_sprite(sprite_index,4,view_xview[0],view_yview[0]+view_hview[0]-32+8*(i+1));
    draw_sprite(sprite_index,5,view_xview[0]+view_wview[0]-8,view_yview[0]+view_hview[0]-32+8*(i+1));
}
// fill
draw_set_color(c_black);
draw_rectangle(view_xview[0]+8,view_yview[0]+view_hview[0]-24,view_xview[0]+view_wview[0]-8,view_yview[0]+view_hview[0]-8,false);
draw_set_color(c_white);


// draw text
var fnt = font_add_sprite(spr_PNC_Font,ord(' '),false,0);
draw_set_font(fnt);
draw_text(view_xview[0]+8,view_yview[0]+view_hview[0]-24,string_upper(display_line1));
draw_text(view_xview[0]+8,view_yview[0]+view_hview[0]-16,string_upper(display_line2));
font_delete(fnt);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
