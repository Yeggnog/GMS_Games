<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

// ACTUALLY MAKE THINGS BLOODY RANDOM
randomize();

// create block matrix
block_matrix[0,0] = 0;
block_matrix_offset_x[0,0] = 0;
block_matrix_offset_y[0,0] = 0;
clear_grid_neko();

// other variables
swaps_left = 4;
death_counter = 12;
dying = false;
cursor_x = 0;
cursor_y = 0;
cursor_offset[0] = 0;
cursor_offset[1] = 0;
draw_offset_x = 16;
draw_offset_y = 16;

// animating
animated = -1;
target_frame = 0;
spec_target_frame = 0;
frame_delay = 0;
frame_delay_temp = 0;
current_frame = 0;
spec_current_frame = 0;
special_anim = 0;
// tells us what we're doing for later
thing_being_animated = -1;

// particles
part_system_Neko = part_system_create();

type_square = part_type_create();
part_type_life(type_square,8,16);
part_type_sprite(type_square,spr_Particles_RNG,true,1,false);

// status [0-&gt;custom, 1-&gt;select action, 2-&gt;AT]
status = 0;
AT_sub = room_speed;
AT_timer = 20;
mash_toggle = 0;

// combo things
combo_prog = 0;
combo_options[0] = true;
combo_options[1] = true;
combo_options[2] = true;
combo_options[3] = true;
// Rolling          Break               Rising          Impact
combos[0,0]=1;    combos[1,0]=1;    combos[2,0]=1;    combos[3,0]=3;
combos[0,1]=2;    combos[1,1]=0;    combos[2,1]=0;    combos[3,1]=1;
combos[0,2]=3;    combos[1,2]=2;    combos[2,2]=4;    combos[3,2]=4;
combos[0,3]=0;    combos[1,3]=4;
combos[0,4]=1;
combos[0,5]=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control input

if(accepting_input &amp;&amp; OmniNeko.whose_turn == 0){

// swap menu
if(status == 0){

// add a random row
/*if(key_B){
    random_row_neko();
}*/

// swap
if(key_A &amp;&amp; swaps_left &gt; 0){
    time_on = false;
    swap_blocks_neko(cursor_x,cursor_y,cursor_x,cursor_y+1);
    swaps_left -= 1;
}

// move the cursor
if(key_left_pressed){
    if(cursor_x &gt; 0){
        cursor_x -= 1;
        cursor_offset[0] = 16;
    }else{
        cursor_x = 5;
        cursor_offset[0] = -16*(array_length_2d(block_matrix,0)-1);
    }
}
if(key_right_pressed){
    if(cursor_x &lt; 5){
        cursor_x += 1;
        cursor_offset[0] = -16;
    }else{
        cursor_x = 0;
        cursor_offset[0] = 16*(array_length_2d(block_matrix,0)-1);
    }
}
if(key_up_pressed){
    if(cursor_y &gt; 0){
        cursor_y -= 1;
        cursor_offset[1] = 16;
    }else{
        cursor_y = 1;
        cursor_offset[1] = -16*(array_height_2d(block_matrix)-2);
    }
}
if(key_down_pressed){
    if(cursor_y &lt; 1){
        cursor_y += 1;
        cursor_offset[1] = -16;
    }else{
        cursor_y = 0;
        cursor_offset[1] = 16*(array_height_2d(block_matrix)-2);
    }
}

}


// battle menu
if(status == 1){
    // party member select
    if(key_up_pressed){
        if(cursor_y &gt; 0){
            cursor_y -= 1;
        }else{
            cursor_y = 2;
        }
    }
    if(key_down_pressed){
        if(cursor_y &lt; 2){
            cursor_y += 1;
        }else{
            cursor_y = 0;
        }
    }
    
    // rotating menu
    if(key_right_pressed){
        if(cursor_x &gt; 0){
            cursor_x -= 1;
            cursor_offset[0] = -90;
        }else{
            cursor_x = 3;
            cursor_offset[0] = -90;
        }
    }
    if(key_left_pressed){
        if(cursor_x &lt; 3){
            cursor_x += 1;
            cursor_offset[0] = 90;
        }else{
            cursor_x = 0;
            cursor_offset[0] = 90;
        }
    }
    if(key_A){
        if(!OmniNeko.party_turns[cursor_y]){
        if(how_many_blocks(cursor_y,cursor_x) &gt;= 2){
            // do an action
            consume_blocks_neko(cursor_y,cursor_x,2);
            /*
            Put this block at the end of every action:
            // alert the Omni Neko
            OmniNeko.after_turn_ping = true;
            OmniNeko.after_turn_id = cursor_y;
            */
            if(cursor_x == 0){
                // normal attack
                animated = cursor_y;
                if(cursor_y == 0){
                    // Lucca
                    target_frame = 3;
                    current_frame = 2;
                frame_delay = 3;
                }
                if(cursor_y == 1){
                    // Avion
                    target_frame = 4;
                    current_frame = 2;
                frame_delay = 3;
                }
                if(cursor_y == 2){
                    // Bazza
                    target_frame = 21;
                    current_frame = 18;
                frame_delay = 4;
                }
            }
            if(cursor_x == 1){
                animated = cursor_y;
                // ability 1
                if(cursor_y == 0){
                    // Lucca (Heal)
                    target_frame = 43;
                    current_frame = 42;
                    special_anim = 1;
                    frame_delay = 3;
                }
                if(cursor_y == 1){
                    // Avion (Rally)
                    target_frame = 1;
                    current_frame = 0;
                    frame_delay = 3;
                }
                if(cursor_y == 2){
                    // Bazza (Ki Charge)
                    target_frame = 28;
                    current_frame = 22;
                    special_anim = 1;
                    spec_target_frame = 12;
                    spec_current_frame = 9;
                    frame_delay = 3;
                }
            }
            if(cursor_x == 2){
                animated = cursor_y;
                // ability 2
                if(cursor_y == 0){
                    // Lucca (Barrier)
                    target_frame = 43;
                    current_frame = 42;
                    special_anim = 2;
                    spec_target_frame = 7;
                    spec_current_frame = 1;
                    frame_delay = 2;
                }
                if(cursor_y == 1){
                    // Avion (Thunder Palm)
                    frame_delay = 3;
                }
                if(cursor_y == 2){
                    // Bazza (Ki Blast)
                    target_frame = 45;
                    current_frame = 44;
                    frame_delay = 3;
                }
            }
            if(cursor_x == 3){
                // AT
                status = 2;
                cursor_x = 0;
                AT_timer = 20;
            }
        }
        }
    }
}

// action trigger menu
if(status == 2){
    // Lucca's AT
    if(cursor_y == 0){
        if(key_B){
            mash_toggle = 3;
            // damage enemy
            animated = 0;
            frame_delay = 3;
            target_frame = 6;
            current_frame = 4;
            part_particles_create(part_system_Neko,view_xview[0]+irandom_range(32,view_wview),view_yview[0]+irandom_range(48,view_hview),type_square,1);
        }
    }
    
    // Avion's AT
    if(cursor_y == 1){
    
    if(key_left_pressed){ // 3
        var flag = false;
        for(var i=0; i&lt;4; i++){
            if(array_length_2d(combos,i) &gt; combo_prog){
            if(combos[i,combo_prog] == 3){
            //show_debug_message("left");
                flag = true;
            }
            }
        }
        if(!flag){
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }else{
            eliminate_combos_neko(id,3);
            combo_prog += 1;
        }
    }
    if(key_right_pressed){ // 1
        var flag = false;
        for(var i=0; i&lt;4; i++){
            if(array_length_2d(combos,i) &gt; combo_prog){
            if(combos[i,combo_prog] == 1){
            //show_debug_message("right");
                flag = true;
            }
            }
        }
        if(!flag){
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }else{
            eliminate_combos_neko(id,1);
            combo_prog += 1;
        }
    }
    if(key_up_pressed){ // 0
        var flag = false;
        for(var i=0; i&lt;4; i++){
            if(array_length_2d(combos,i) &gt; combo_prog){
            if(combos[i,combo_prog] == 0){
            //show_debug_message("up");
                flag = true;
            }
            }
        }
        if(!flag){
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }else{
            eliminate_combos_neko(id,0);
            combo_prog += 1;
        }
    }
    if(key_down_pressed){ // 2
        var flag = false;
        for(var i=0; i&lt;4; i++){
            if(array_length_2d(combos,i) &gt; combo_prog){
            if(combos[i,combo_prog] == 2){
            //show_debug_message("down");
                flag = true;
            }
            }
        }
        if(!flag){
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }else{
            eliminate_combos_neko(id,2);
            combo_prog += 1;
        }
    }
    if(key_B){ // 4
        var flag = false;
        for(var i=0; i&lt;4; i++){
            if(array_length_2d(combos,i) &gt; combo_prog){
            if(combos[i,combo_prog] == 4){
            //show_debug_message("B");
                flag = true;
            }
            }
        }
        if(!flag){
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }else{
            eliminate_combos_neko(id,4);
            // add the respective move to the combo
            cursor_x += 1;
            combo_prog = 0;
            for(var i=0; i&lt;4; i++){
                combo_options[i] = true;
            }
        }
    }
    
    }
    // Bazza's AT
    if(cursor_y == 2){
    
    if(key_B){
        if(cursor_x &lt; 86){
            cursor_x += 1;
            mash_toggle = 3;
        }
    }
        
    }
}

} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// other control

// close the box
if(status == 0 &amp;&amp; swaps_left == 0 &amp;&amp; accepting_input){
    // close menu
    dying = true;
}
if(dying){
    if(death_counter &gt; 0){
        death_counter -= 1;
    }else{
        //change to next screen
        dying = false;
        status = 1;
        cursor_x = 0;
        cursor_y = 0;
    }
}

// update offsets
for(var i=0; i&lt;3; i++){
    for(var j=0; j&lt;6; j++){
        var flag = false;
        // block offsets
        if(block_matrix_offset_x[i,j] != 0){
            flag = true;
            if(block_matrix_offset_x[i,j] &lt; 0){
                block_matrix_offset_x[i,j] += 2;
            }else{
                block_matrix_offset_x[i,j] -= 2;
            }
        }
        if(block_matrix_offset_y[i,j] != 0){
            flag = true;
            if(block_matrix_offset_y[i,j] &lt; 0){
                block_matrix_offset_y[i,j] += 2;
            }else{
                block_matrix_offset_y[i,j] -= 2;
            }
        }
        if(!flag){
            accepting_input = true;
        }
        
    }
}

// battle anims
if(frame_delay_temp &lt; frame_delay){
    frame_delay_temp += 1;
}else{
    frame_delay_temp = 0;
    if(current_frame &lt; target_frame){
        current_frame += 1;
    }else{
        // end animation
        if(spec_current_frame &gt;= spec_target_frame){
            animated = -1;
            current_frame = 0;
            target_frame = 0;
            frame_delay = 0;
            frame_delay_temp = 0;
            special_anim = 0;
            spec_target_frame = 0;
            spec_current_frame = 0;
            // end attack and do damage here
        }
    }
    if(spec_current_frame &lt; spec_target_frame){
        spec_current_frame += 1;
    }
}

// cursor
var flag = false;
if(cursor_offset[0] != 0){
    flag = true;
    if(cursor_offset[0] &lt; 0){
        if(status == 1){
            cursor_offset[0] += 5;
        }else{
            cursor_offset[0] += 2;
        }
    }else{
        if(status == 1){
            cursor_offset[0] -= 5;
        }else{
            cursor_offset[0] -= 2;
        }
    }
}
if(cursor_offset[1] != 0){
    flag = true;
    if(cursor_offset[1] &lt; 0){
        if(status == 1){
            cursor_offset[1] += 5;
        }else{
            cursor_offset[1] += 2;
        }
    }else{
        if(status == 1){
            cursor_offset[1] -= 5;
        }else{
            cursor_offset[1] -= 2;
        }
    }
}
if(!flag){
    accepting_input = true;
}
if(status == 2){
    if(AT_sub &gt; 0){
        AT_sub -= 1;
    }else{
        AT_sub = room_speed;
        if(AT_timer &gt; 0){
            AT_timer -= 1;
        }else{
            // AT attack
            
            // Lucca (none)
            
            // Avion
            // Bazza
            
            // alert the Omni Neko
            OmniNeko.after_turn_ping = true;
            OmniNeko.after_turn_id = cursor_y;
            
            // go back to menu
            status = 1;
            cursor_x = 0;
        }
    }
    if(mash_toggle &gt; 0){
        mash_toggle -= 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw

// making these for my own sanity
var d_o_x = draw_offset_x+view_xview[0];
var d_o_y = draw_offset_y+view_yview[0];
var d_o_xv = view_xview[0];
var d_o_yv = view_yview[0];

// swap menu
if(status == 0){

// draw box
// corners
draw_sprite(spr_PNC_MessageBox,0,d_o_x-8,d_o_y-16);
draw_sprite(spr_PNC_MessageBox,1,d_o_x+(16*6),d_o_y-16);
draw_sprite(spr_PNC_MessageBox,2,d_o_x+(16*6),d_o_y+(16*3));
draw_sprite(spr_PNC_MessageBox,3,d_o_x-8,d_o_y+(16*3));
// sides
for(var i=0; i&lt;12; i++){
    draw_sprite(spr_PNC_MessageBox,6,d_o_x+(8*i),d_o_y-16);
    draw_sprite(spr_PNC_MessageBox,7,d_o_x+(8*i),d_o_y+(16*3));
}
for(var i=0; i&lt;7; i++){
    draw_sprite(spr_PNC_MessageBox,4,d_o_x-8,d_o_y+(8*i)-8);
    draw_sprite(spr_PNC_MessageBox,5,d_o_x+(16*6),d_o_y+(8*i)-8);
}
// fill
draw_set_color(c_black);
draw_rectangle(d_o_x,d_o_y-8,d_o_x+(16*6),d_o_y+(16*3),false);
draw_set_color(c_white);
// draw swaps left
var fnt = font_add_sprite(spr_PNC_Font,ord(' '),false,0);
draw_set_font(fnt);
if(swaps_left != 1){
    draw_text(d_o_x,d_o_y-9,string(swaps_left)+" SWAPS LEFT");
}else{
    draw_text(d_o_x,d_o_y-9,string(swaps_left)+" SWAP LEFT");
}
font_delete(fnt);
// draw block matrix
for(var i=0; i&lt;3; i++){
var str = "";
    for(var j=0; j&lt;6; j++){
        if(block_matrix[i,j] != -1){
            draw_sprite(spr_Neko_Blocks,block_matrix[i,j],(16*j)+d_o_x+block_matrix_offset_x[i,j],(16*i)+d_o_y+block_matrix_offset_y[i,j]);
        }
    }
}

// draw swap cursor
draw_line_width((cursor_x*16)+d_o_x-1+cursor_offset[0],(cursor_y*16)+d_o_y-1+cursor_offset[1],((cursor_x+1)*16)+d_o_x-2+cursor_offset[0],(cursor_y*16)+d_o_y-1+cursor_offset[1],2);
draw_line_width((cursor_x*16)+d_o_x-1+cursor_offset[0],((cursor_y+2)*16)+d_o_y-2+cursor_offset[1],((cursor_x+1)*16)+d_o_x-2+cursor_offset[0],((cursor_y+2)*16)+d_o_y-2+cursor_offset[1],2);
draw_line_width(((cursor_x+1)*16)+d_o_x-2+cursor_offset[0],(cursor_y*16)+d_o_y-1+cursor_offset[1],((cursor_x+1)*16)+d_o_x-2+cursor_offset[0],((cursor_y+2)*16)+d_o_y-2+cursor_offset[1],2);
draw_line_width((cursor_x*16)+d_o_x-1+cursor_offset[0],(cursor_y*16)+d_o_y-1+cursor_offset[1],(cursor_x*16)+d_o_x-1+cursor_offset[0],((cursor_y+2)*16)+d_o_y-2+cursor_offset[1],2);

}

// general battle menu
if(status == 1 || status == 2){

// draw party members (-16,-6)
for(var i=0; i&lt;3; i++){
    // party members
    if(i == cursor_y){
    // health bars
    if(animated == -1 &amp;&amp; status == 1){
        draw_sprite(spr_Neko_HPBar,1,view_xview[0]+21,view_yview[0]+33+(26*i));
        draw_sprite_part(spr_Neko_HPBar,0,1,0,round(33*(OmniNeko.party_stats[0,0]/OmniNeko.party_stats[0,3])),11,view_xview[0]+22,view_yview[0]+33+(26*i));
    }
        if(animated != i){
            draw_sprite(spr_Neko_Party,i*8,view_xview[0]+24,view_yview[0]+5+(26*i));
        }else if(i == 1 &amp;&amp; animated == 1){
            // Avion's Techs
            draw_sprite(spr_Neko_SwordTechs,current_frame,view_xview[0]+8,view_yview[0]-1+(26*i)); 
        }else{
            // add exception(s) for wounded / win poses
            if(special_anim == 0){
                draw_sprite(spr_Neko_Party,current_frame,view_xview[0]+24,view_yview[0]+5+(26*i));
            }else{
            if(i == 0){
                draw_sprite(spr_Neko_Party,current_frame,view_xview[0]+24,view_yview[0]+5+(26*i)); 
                if(special_anim == 1){
                    // heal
                }
                if(special_anim == 2){
                    // barrier
                    draw_sprite(spr_Neko_TechAnims,spec_current_frame,view_xview[0]+24,view_yview[0]+5+(26*i));
                }
            }
            if(i == 1){
                // avion's 2+ frame
                // base on special_anim's value
            }
            if(i == 2){
                draw_sprite(spr_Neko_Party,current_frame,view_xview[0]+24,view_yview[0]+5+(26*i)); 
                // Ki Aura
                draw_sprite_ext(spr_Neko_TechAnims,spec_current_frame,view_xview[0]+24,view_yview[0]+5+(26*i),1.0,1.0,0,c_white,0.6);
            }
            }
        }
    }else{
        draw_sprite(spr_Neko_Party,i*8,view_xview[0]+8,view_yview[0]+5+(26*i));
        if(special_anim == 1){
            // heal
        }
        if(special_anim == 2){
            // barrier
            draw_sprite(spr_Neko_TechAnims,spec_current_frame,view_xview[0]+8,view_yview[0]+5+(26*i));
        }
        // health bars
        if(animated == -1 &amp;&amp; status == 1){
            draw_sprite(spr_Neko_HPBar,1,view_xview[0]+5,view_yview[0]+33+(26*i));
            draw_sprite_part(spr_Neko_HPBar,0,1,0,round(33*(OmniNeko.party_stats[0,0]/OmniNeko.party_stats[0,3])),11,view_xview[0]+6,view_yview[0]+33+(26*i));
        }
    }
}

}

if(status == 1){
// draw blocks
//box
//corners
draw_sprite(spr_PNC_MessageBox,0,view_xview[0]+view_wview-79,view_yview[0]);
draw_sprite(spr_PNC_MessageBox,1,view_xview[0]+view_wview-7,view_yview[0]);
//sides
for(var i=0; i&lt;8; i++){
    draw_sprite(spr_PNC_MessageBox,6,view_xview[0]+view_wview-71+(8*i),view_yview[0]);
    draw_sprite(spr_PNC_MessageBox,7,view_xview[0]+view_wview-71+(8*i),view_yview[0]+18);
}
for(var i=0; i&lt;2; i++){
    draw_sprite(spr_PNC_MessageBox,4,view_xview[0]+view_wview-79,view_yview[0]+7+(8*i));
    draw_sprite(spr_PNC_MessageBox,5,view_xview[0]+view_wview-7,view_yview[0]+7+(8*i));
}
//more corners
draw_sprite(spr_PNC_MessageBox,2,view_xview[0]+view_wview-7,view_yview[0]+18);
draw_sprite(spr_PNC_MessageBox,3,view_xview[0]+view_wview-79,view_yview[0]+18);
//fill
draw_set_color(c_black);
draw_rectangle(view_xview[0]+view_wview-72,view_yview[0]+8,view_xview[0]+view_wview-7,view_yview[0]+18,false);
draw_set_color(c_white);
//blocks
for(var i=0; i&lt;6; i++){
    if(block_matrix[cursor_y,i] != -1){
    draw_sprite(spr_Neko_Blocks_S,block_matrix[cursor_y,i],(11*i)+view_xview[0]+view_wview-72,view_yview[0]+7);
    }
}
// rotating menu
if(animated == -1){
for(var i=0; i&lt;4; i++){
    var temmie = cursor_offset[0]+(90*(i-1));
    var alphys = ((abs(cursor_offset[0]))/90);
    var alphys2 = (abs(abs(cursor_offset[0])-90)/90);
    if(temmie &lt;= 0 || temmie &gt;= 180){
        draw_sprite(spr_Neko_Blocks,i+cursor_x,view_xview[0]+31+lengthdir_x(16,cursor_offset[0]+(90*(i-1))),view_yview[0]+20+(26*cursor_y)+lengthdir_y(9,cursor_offset[0]+(90*(i-1))));
    }else if((90*(i-1)) == 90){
        // fade into background
        draw_sprite_ext(spr_Neko_Blocks,i+cursor_x,view_xview[0]+31+lengthdir_x(16,cursor_offset[0]+(90*(i-1))),view_yview[0]+20+(26*cursor_y)+lengthdir_y(9,cursor_offset[0]+(90*(i-1))),1.0,1.0,0,c_white,alphys);
    }else{
        draw_sprite_ext(spr_Neko_Blocks,i+cursor_x,view_xview[0]+31+lengthdir_x(16,cursor_offset[0]+(90*(i-1))),view_yview[0]+20+(26*cursor_y)+lengthdir_y(9,cursor_offset[0]+(90*(i-1))),1.0,1.0,0,c_white,alphys2);
    }
}
}

}

// AT Menu
if(status == 2){
    var fnt = font_add_sprite(spr_PNC_Font,ord(' '),false,0);
    draw_set_font(fnt);
    // text
    draw_text(view_xview[0],view_yview[0],"TIME "+string(AT_timer));
    // Lucca
    // Bazza
    font_delete(fnt);
    // Lucca
    // button
    if(mash_toggle == 0){
        draw_sprite_part(spr_KiBar,5,16,0,16,16,d_o_xv+16,d_o_yv+24);
    }else{
        draw_sprite_part(spr_KiBar,5,0,0,16,16,d_o_xv+16,d_o_yv+24);
    }
    // Avion
    if(cursor_y == 1){
    
    // draw box
    // corners
    draw_sprite(spr_PNC_MessageBox,0,d_o_xv+8,d_o_yv+8);
    draw_sprite(spr_PNC_MessageBox,1,d_o_xv+(8*15),d_o_yv+8);
    draw_sprite(spr_PNC_MessageBox,2,d_o_xv+(8*15),d_o_yv+(8*11));
    draw_sprite(spr_PNC_MessageBox,3,d_o_xv+8,d_o_yv+(8*11));
    // sides
    for(var i=0; i&lt;13; i++){
        draw_sprite(spr_PNC_MessageBox,6,d_o_xv+16+(8*i),d_o_yv+8);
        draw_sprite(spr_PNC_MessageBox,7,d_o_xv+16+(8*i),d_o_yv+(8*11));
    }
    for(var i=0; i&lt;9; i++){
        draw_sprite(spr_PNC_MessageBox,4,d_o_xv+8,d_o_yv+16+(8*i));
        draw_sprite(spr_PNC_MessageBox,5,d_o_xv+(8*15),d_o_yv+16+(8*i));
    }
    // fill
    draw_set_color(c_black);
    draw_rectangle(d_o_xv+16,d_o_yv+16,d_o_xv+(8*15),d_o_yv+(8*11),false);
    draw_set_color(c_white);
    // Text
    var fnt = font_add_sprite(spr_PNC_Font,ord(' '),false,0);
    draw_set_font(fnt);
    draw_text(view_xview[0]+16,view_yview[0]+16,string(cursor_x)+" COMBO");
    draw_text(view_xview[0]+16,view_yview[0]+24,"IMPACT SLASH");
    draw_text(view_xview[0]+16,view_yview[0]+40,"RISING SLASH");
    draw_text(view_xview[0]+16,view_yview[0]+56,"BREAK SLASH");
    draw_text(view_xview[0]+16,view_yview[0]+72,"ROLLING SLASH");
    font_delete(fnt);
    // Combos
    for(var i=0; i&lt;4; i++){
        for(var j=0; j&lt;array_length_2d(combos,i); j++){
            if(combo_options[i] &amp;&amp; j &lt; combo_prog){
                    draw_sprite(spr_ButtonCode,combos[i,j]+6,16+(8*j),48+(16*(2-i)));
            }else{
                draw_sprite(spr_ButtonCode,combos[i,j],16+(8*j),48+(16*(2-i)));
            }
        }
    }
    
    }
    
    // Bazza
    if(cursor_y == 2){
        draw_sprite(spr_KiBar,0,d_o_xv+16,d_o_yv+40);
        // button
        if(mash_toggle == 0){
            draw_sprite_part(spr_KiBar,5,16,0,16,16,d_o_xv+16,d_o_yv+24);
        }else{
            draw_sprite_part(spr_KiBar,5,0,0,16,16,d_o_xv+16,d_o_yv+24);
        }
        // bar
        if(cursor_x &lt; 60){ // standard
            if(cursor_x &lt; 7){
                for(var i=0; i&lt;cursor_x; i++){
                    // draw lines
                    draw_sprite_part(spr_KiBar,2,15,0,8,20,d_o_xv+17+i,d_o_yv+40);
                }
            }else{
                draw_sprite_part(spr_KiBar,2,1,0,15,20,d_o_xv+10+cursor_x,d_o_yv+40);
                if(cursor_x &gt; 7){
                    draw_sprite_part(spr_KiBar,1,0,0,cursor_x+2,20,d_o_xv+16,d_o_yv+40);
                }
            }
        }else{ // glowing
            if(cursor_x &lt; 7){
                for(var i=0; i&lt;cursor_x; i++){
                    // draw lines
                    draw_sprite_part(spr_KiBar,4,15,0,8,20,d_o_xv+17+i,d_o_yv+39);
                }
            }else{
                draw_sprite_part(spr_KiBar,4,1,0,15,20,d_o_xv+10+cursor_x,d_o_yv+40);
                if(cursor_x &gt; 7){
                    draw_sprite_part(spr_KiBar,3,0,0,cursor_x+2,20,d_o_xv+16,d_o_yv+40);
                }
            }
        }
    }
}
//draw_text(view_xview[0]+8,view_yview[0]+36,string(temmie));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
