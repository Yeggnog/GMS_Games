<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Pldn_RS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// movement
dashing = false;
dash_dir = 0;
dash_timer = 0;
hurt = false;
invis = 0;
x_spd = 0;
y_spd = 0;
facing[0] = 0;
facing[1] = 180;
// afterimage offsets
afterimg[0,0] = 0;  afterimg[0,1] = 0;
afterimg[1,0] = 0;  afterimg[1,1] = 0;
afterimg[2,0] = 0;  afterimg[2,1] = 0;
afterimg[3,0] = 0;  afterimg[3,1] = 0;

// combat
HP = 25;
maxHP = 25;
slashing = false;
slash = -1;

//show_debug_message("I exist!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_Slash_TBS)){
    with(obj_Slash_TBS){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controls and updates

// controls
if(!dashing){
    if(key_left){
        // left
        x_spd = -2;
    } else if(key_right){
        // right
        x_spd = 2;
    } else {
        // stop
        x_spd = 0;
    }
    if(key_up){
        // up
        y_spd = -2;
    } else if(key_down){
        // down
        y_spd = 2;
    } else {
        // stop
        y_spd = 0;
    }
}

if(key_A &amp;&amp; !slashing){
    // slash
    slashing = true;
    var angl = point_direction(x,y,mouse_x,mouse_y);
    slash = instance_create(x+lengthdir_x(8,angl),y+lengthdir_y(8,angl),obj_Slash_TBS);
    slash.angle = angl;
}

if(key_B){
    // dash
    dashing = true;
    dash_angle = point_direction(x,y,mouse_x,mouse_y);
    dash_timer = 6;
    x_spd = lengthdir_x(6,dash_angle);
    y_spd = lengthdir_y(6,dash_angle);
    // sprite
    if(facing[0] == 0){
        if(facing[1] == 0){
            if(sprite_index != spr_Pldn_Dash_LN){sprite_index = spr_Pldn_Dash_LN;}
        }else{
            if(sprite_index != spr_Pldn_Dash_LS){sprite_index = spr_Pldn_Dash_LS;}
        }
    }else{
        if(facing[1] == 0){
            if(sprite_index != spr_Pldn_Dash_RN){sprite_index = spr_Pldn_Dash_RN;}   
        }else{
            if(sprite_index != spr_Pldn_Dash_RS){sprite_index = spr_Pldn_Dash_RS;}
        }
    }
}

// updates
while((x+x_spd &gt; room_width-8 || x+x_spd &lt; 8) &amp;&amp; x_spd != 0){
    x_spd = round(x_spd);
    if(x_spd &lt; 0){
        x_spd += 1;
    }
    if(x_spd &gt; 0){
        x_spd -= 1;
    }
}
while((y+y_spd &gt; room_height-10 || y+y_spd &lt; 10) &amp;&amp; y_spd != 0){
    y_spd = round(y_spd);
    if(y_spd &lt; 0){
        y_spd += 1;
    }
    if(y_spd &gt; 0){
        y_spd -= 1;
    }
}
if(dashing){
    if(dash_timer &gt; 0){
        dash_timer -= 1;
    }else{
        dashing = false;
        x_spd = 0;
        y_spd = 0;
    }
}

// update afterimages
for(var i=array_length_2d(afterimg,0)-1; i&gt;0; i--){
    afterimg[i,0] = afterimg[i-1,0];
    afterimg[i,1] = afterimg[i-1,1];
}
afterimg[0,0] = x;
afterimg[0,1] = y;

// update pos
x += x_spd;
y += y_spd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sprite updates

// facing
var angle = point_direction(x,y,mouse_x,mouse_y);
// horizontal
if(angle &lt; 90 || angle &gt;= 270){
    // right
    facing[0] = 180;
}else if(angle &gt;= 90 &amp;&amp; angle &lt; 270){
    // left
    facing[0] = 0;
}
// vertical
if(angle &gt;= 0 &amp;&amp; angle &lt; 180){
    // up
    facing[1] = 0;
}else{
    // down
    facing[1] = 180;
}

// sprites
if(!dashing){
    if(facing[0] == 0){
        if(facing[1] == 0){
            if(sprite_index != spr_Pldn_LN){sprite_index = spr_Pldn_LN;}
        }else{
            if(sprite_index != spr_Pldn_LS){sprite_index = spr_Pldn_LS;}
        }
    }else{
        if(facing[1] == 0){
            if(sprite_index != spr_Pldn_RN){sprite_index = spr_Pldn_RN;}   
        }else{
            if(sprite_index != spr_Pldn_RS){sprite_index = spr_Pldn_RS;}
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// afterimages
if(dashing){
    shader_set(Scanline);
    var tempid = shader_get_uniform(Scanline,"in_Colour_actual");
    var pixelW = shader_get_uniform(Scanline,"pixelW");
    var pixelH = shader_get_uniform(Scanline,"pixelH");
    var spacing = shader_get_uniform(Scanline,"spacing");
    shader_set_uniform_f(pixelW,texture_get_texel_width(sprite_get_texture(sprite_index,0)));
    shader_set_uniform_f(pixelH,texture_get_texel_height(sprite_get_texture(sprite_index,0)));
    for(var i=0; i&lt;array_length_2d(afterimg,0); i++){
        shader_set_uniform_f(spacing,i);
        shader_set_uniform_f(tempid,64.0,255.0,255.0,1.0);
        draw_sprite(sprite_index,image_index,afterimg[i,0],afterimg[i,1]);
    }
    shader_reset();
}

// self
if(obj_TBS_Control.tea_break &lt; 20){
    draw_self();
}

// UI
draw_sprite(spr_UI_TBS,0,view_xview[0]+2,view_yview[0]+2);
draw_sprite_part(spr_UI_TBS,1,8,2,35*(HP/maxHP),4,view_xview[0]+10,view_yview[0]+4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
