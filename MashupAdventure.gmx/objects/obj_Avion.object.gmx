<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Avion_R</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set up

// movement
x_spd = 0;
y_spd = 0;
facing = 0;
dashing = false;
othr = -1;
/*
-1 -&gt; none
0 -&gt; slash 1
1 -&gt; slash 2
2 -&gt; slash 3
3 -&gt; rising
4 -&gt; kick
5 -&gt; dash
*/
dash = 0;

// combat
sub_combo = 0;
atk_hitbox = -1;
slashing = false;
attack = -1;
combo_timer = 0;
hp = 200;
maxHP = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controls and updates

// movement
if(key_left &amp;&amp; !dashing){
    // move left
    if(x_spd &lt; 4){
        x_spd = -4;
    }
    facing = 180;
}else if(key_right &amp;&amp; !dashing){
    // move right
    if(x_spd &lt; 4){
        x_spd = 4;
    }
    facing = 0;
}else{
    // stop
    if(!dashing &amp;&amp; !(slashing &amp;&amp; attack == 4)){
        x_spd = 0;
    }
}
if(key_B){
    if(key_down){
        if(!slashing){
            // dash
            dashing = true;
            dash = 8;
            y_spd = 0;
            if(facing == 0){
                x_spd = 10;
            }else{
                x_spd = -10;
            }
            // sprite update
            if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Dash_R){
                sprite_index = spr_Avion_Dash_R;
            }
            if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Dash_L){
                sprite_index = spr_Avion_Dash_L;
            }
            image_speed = 0;
            image_index = 0;
        }
    }else{
        // jump
        if(place_meeting(x,y+1,obj_Omni_Solid)){
            y_spd -= 8;
            // sprite update
            if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Jump_R){
                sprite_index = spr_Avion_Jump_R;
            }
            if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Jump_L){
                sprite_index = spr_Avion_Jump_L;
            }
            image_speed = 0;
            image_index = 0;
        }
    }
}

// combat
if(key_A){
    // attack
    slashing = true;
    image_speed = 1;
    // reset timer
    combo_timer = 60;
    sub_combo += 1;
    if(atk_hitbox != -1){
        with(atk_hitbox){
            instance_destroy();
        }
        atk_hitbox = -1;
    }
    atk_hitbox = instance_create(0,0,obj_Avion_Slash);
    // atk_hitbox.knock = 2;
    // update offset[]
    if(dashing){
        // dash slash
        attack = 5;
    }else{
        if(key_up){
            // rising
            attack = 3;
            y_spd = -10;
            atk_hitbox.sprite_index = spr_RSlashHitbox;
            atk_hitbox.offset[1] = -1;
            if(facing == 0){
                atk_hitbox.offset[0] = 16;
            }else{
                atk_hitbox.offset[0] = -16;
            }
        }else if(key_down &amp;&amp; !place_meeting(x,y+1,obj_Omni_Solid)){
            // kick
            attack = 4;
            atk_hitbox.sprite_index = spr_KickHitbox;
            atk_hitbox.offset[1] = 8;
            if(facing == 0){
                x_spd = 10;
                atk_hitbox.offset[0] = 9;
            }else{
                x_spd = -10;
                atk_hitbox.offset[0] = -9;
            }
            y_spd = 4;
        }else{
            // normal
            if(attack == 2){
                attack = -1;
            }
            if(!place_meeting(x,y+1,obj_Omni_Solid)){
                y_spd = -3;
            }
            if(attack == -1){
                attack = 0;
                // hitbox
                if(!place_meeting(x,y+1,obj_Omni_Solid)){
                    // Air
                    atk_hitbox.sprite_index = spr_ASlash1Hitbox;
                    atk_hitbox.offset[1] = 0;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 11;
                    }else{
                        atk_hitbox.offset[0] = -11;
                    }
                }else{
                    // Ground
                    atk_hitbox.sprite_index = spr_Slash1Hitbox;
                    atk_hitbox.offset[1] = 1;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 13;
                    }else{
                        atk_hitbox.offset[0] = -13;
                    }
                }
            }else if(attack == 0){
                attack = 1;
                // hitbox
                if(!place_meeting(x,y+1,obj_Omni_Solid)){
                    // Air
                    atk_hitbox.sprite_index = spr_ASlash2Hitbox;
                    atk_hitbox.offset[1] = -2;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 8;
                    }else{
                        atk_hitbox.offset[0] = -8;
                    }
                }else{
                    // Ground
                    atk_hitbox.sprite_index = spr_Slash2Hitbox;
                    atk_hitbox.offset[1] = 5;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 13;
                    }else{
                        atk_hitbox.offset[0] = -13;
                    }
                }
            }else{
                attack = 2;
                // hitbox
                if(!place_meeting(x,y+1,obj_Omni_Solid)){
                    // Air
                    atk_hitbox.sprite_index = spr_ASlash3Hitbox;
                    atk_hitbox.offset[1] = -1;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 10;
                    }else{
                        atk_hitbox.offset[0] = -10;
                    }
                }else{
                    // Ground
                    atk_hitbox.sprite_index = spr_Slash3Hitbox;
                    atk_hitbox.offset[1] = 0;
                    if(facing == 0){
                        atk_hitbox.offset[0] = 10;
                    }else{
                        atk_hitbox.offset[0] = -10;
                    }
                }
            }
        }
    }
}

// ---- updates ----

// dash
if(dashing){
    if(dash &gt; 0){
        dash -= 1;
    }else{
        dashing = false;
        image_speed = 1;
    }
}

// gravity
if(!dashing &amp;&amp; !(slashing &amp;&amp; attack == 4)){
    if(!place_meeting(x,y+y_spd,obj_Omni_Solid) &amp;&amp; !place_meeting(x,y+1,obj_Omni_Solid)){
        if(y_spd &lt; 8){
            y_spd += 1;
        }
    }else if(y_spd &gt; 0){
        y_spd = 0;
    }
}

// collisions
while(place_meeting(x+x_spd,y,obj_Omni_Solid) &amp;&amp; x_spd != 0){
    if(x_spd &lt; 0){
        x_spd += 1;
    }
    if(x_spd &gt; 0){
        x_spd -= 1;
    }
}
if(dashing &amp;&amp; x_spd == 0){
    dash = 0;
    dashing = false;
    image_speed = 1;
}
if(!dashing &amp;&amp; place_meeting(x,y+y_spd,obj_Omni_Solid)){
    // land
    while(place_meeting(x,y+y_spd,obj_Omni_Solid) &amp;&amp; y_spd != 0){
        if(y_spd &lt; 0){
            y_spd += 1;
        }
        if(y_spd &gt; 0){
            y_spd -= 1;
        }
    }
    if(place_meeting(x,y+1,obj_Omni_Solid)){
        // sprite update
        if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Land_R){
            sprite_index = spr_Avion_Land_R;
        }
        if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Land_L){
            sprite_index = spr_Avion_Land_L;
        }
        image_speed = 1;
        if(slashing &amp;&amp; (attack == 4 || attack = 3)){
            slashing = false;
            attack = -1;
            if(atk_hitbox != -1){
                with(atk_hitbox){
                    instance_destroy();
                }
                atk_hitbox = -1;
            }
        }
        //image_index = 0;
    }
}

// move position
x += x_spd;
y += y_spd;

// push out
if(place_meeting(x,y,obj_Omni_Solid)){
    var othr = instance_place(x,y,obj_Omni_Solid);
    var dir = point_direction(othr.x+8,othr.y+8,x,y);
    x += round(lengthdir_x(2,dir));
    y += round(lengthdir_y(2,dir));
}

// combo timer
if(combo_timer &gt; 0){
    combo_timer -= 1;
}else if(sub_combo &gt; 0){
    sub_combo = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sprite updating
if(place_meeting(x,y+1,obj_Omni_Solid)){
    // ground
    if(x_spd == 0){
        // stationary
        if(!slashing &amp;&amp; !(sprite_index == spr_Avion_Land_R || sprite_index == spr_Avion_Land_L)){
            // stand still
            if(facing == 0 &amp;&amp; sprite_index != spr_Avion_R){
                sprite_index = spr_Avion_R;
            }
            if(facing == 180 &amp;&amp; sprite_index != spr_Avion_L){
                sprite_index = spr_Avion_L;
            }
        }else{
            // attacking
            switch(attack){
                case 0:
                    if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Slash1_R){
                        sprite_index = spr_Avion_Slash1_R;
                    }
                    if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Slash1_L){
                        sprite_index = spr_Avion_Slash1_L;
                    }
                break;
                case 1:
                    if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Slash2_R){
                        sprite_index = spr_Avion_Slash2_R;
                    }
                    if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Slash2_L){
                        sprite_index = spr_Avion_Slash2_L;
                    }
                break;
                case 2:
                    if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Slash3_R){
                        sprite_index = spr_Avion_Slash3_R;
                    }
                    if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Slash3_L){
                        sprite_index = spr_Avion_Slash3_L;
                    }
                break;
            }
        }
    }else{
        // moving
        if(!dashing){
            // running
            image_speed = 1;
            if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Run_R){
                sprite_index = spr_Avion_Run_R;
            }
            if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Run_L){
                sprite_index = spr_Avion_Run_L;
            }
        }
    }
}else{
    // air
    if(slashing){
        // attacking
        switch(attack){
            case 0:
                if(facing == 0 &amp;&amp; sprite_index != spr_Avion_AirS1_R){
                    sprite_index = spr_Avion_AirS1_R;
                }
                if(facing == 180 &amp;&amp; sprite_index != spr_Avion_AirS1_L){
                    sprite_index = spr_Avion_AirS1_L;
                }
            break;
            case 1:
                if(facing == 0 &amp;&amp; sprite_index != spr_Avion_AirS2_R){
                    sprite_index = spr_Avion_AirS2_R;
                }
                if(facing == 180 &amp;&amp; sprite_index != spr_Avion_AirS2_L){
                    sprite_index = spr_Avion_AirS2_L;
                }
            break;
            case 2:
                if(facing == 0 &amp;&amp; sprite_index != spr_Avion_AirS3_R){
                    sprite_index = spr_Avion_AirS3_R;
                }
                if(facing == 180 &amp;&amp; sprite_index != spr_Avion_AirS3_L){
                    sprite_index = spr_Avion_AirS3_L;
                }
            break;
            case 3:
                // rising
                if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Rising_R){
                    sprite_index = spr_Avion_Rising_R;
                }
                if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Rising_L){
                    sprite_index = spr_Avion_Rising_L;
                }
            break;
            case 4:
                // kick
                if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Kick_R){
                    sprite_index = spr_Avion_Kick_R;
                }
                if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Kick_L){
                    sprite_index = spr_Avion_Kick_L;
                }
            break;
        }
    }else{
        // falling
        if(y_spd &gt; 0){
            image_index = 1;
        }
    }
}
if(dashing){
    // dashing
    if(slashing){
        // dash attack
        if(facing == 0 &amp;&amp; sprite_index != spr_Avion_DashS_R){
            sprite_index = spr_Avion_DashS_R;
        }
        if(facing == 180 &amp;&amp; sprite_index != spr_Avion_DashS_L){
            sprite_index = spr_Avion_DashS_L;
        }
    }else{
        // dash
        if(facing == 0 &amp;&amp; sprite_index != spr_Avion_Dash_R){
            sprite_index = spr_Avion_Dash_R;
        }
        if(facing == 180 &amp;&amp; sprite_index != spr_Avion_Dash_L){
            sprite_index = spr_Avion_Dash_L;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index == spr_Avion_Land_R){
    sprite_index = spr_Avion_R;
}
if(sprite_index == spr_Avion_Land_L){
    sprite_index = spr_Avion_L;
}
if(attack != -1 &amp;&amp; attack != 4){
    image_speed = 0;
    if(attack != 0 &amp;&amp; attack != 1){
        attack = -1;
    }
    if(atk_hitbox != -1){
        with(atk_hitbox){
            instance_destroy();
        }
        atk_hitbox = -1;
    }
    slashing = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI and oneself
draw_self();

// UI

// player HP bar
draw_sprite(spr_UI_Duel,0,view_xview[0]+1,view_yview[0]+1);
draw_sprite_part(spr_UI_Duel,1,2,0,round(52*(hp/maxHP)),11,view_xview[0]+3,view_yview[0]+1);

// enemy HP bar
draw_sprite(spr_UI_Duel,2,view_xview[0]+view_wview[0]-57,view_yview[0]+1);
if(instance_exists(obj_Hittable)){
    draw_sprite_part(spr_UI_Duel,3,2+(52-round(52*(obj_Hittable.hp/obj_Hittable.maxHP))),0,round(52*(obj_Hittable.hp/obj_Hittable.maxHP)),11,view_xview[0]+view_wview[0]+(52-round(52*(obj_Hittable.hp/obj_Hittable.maxHP)))-55,view_yview[0]+1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
