<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Neko_OW</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I TOLD YOU I'M BAD AT NAMING THINGS

// what character we're controlling
leader = 0;
image = 0;
image_temp = 0;
// pose [0-&gt;down, 1-&gt;right, 2-&gt;left, 3-&gt;up]
pose = 0;

// status [0-&gt;gameplay, 1-&gt;stat menu, 2-&gt;dialogue?]
status = 0;

// tile-based movement
raw_pos[0] = x;
raw_pos[1] = y;
offset[0] = 0;
offset[1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control input

if(accepting_input){

// gameplay
if(status == 0){

if(offset[0] == 0 &amp;&amp; offset[1] == 0){

if(key_left){
    pose = 2;
    if(!place_meeting(x-16,y,obj_Omni_Solid)){
        // move left
        raw_pos[0] -= 16;
        offset[0] = 16;
    }
}

if(key_right){
    pose = 1;
    if(!place_meeting(x+16,y,obj_Omni_Solid)){
        // move right
        raw_pos[0] += 16;
        offset[0] = -16;
    }
}

if(key_up){
    pose = 3;
    if(!place_meeting(x,y-16,obj_Omni_Solid)){
        // move up
        raw_pos[1] -= 16;
        offset[1] = 16;
    }
}

if(key_down){
    pose = 0;
    if(!place_meeting(x,y+16,obj_Omni_Solid) &amp;&amp; y+16 &lt; room_height){
        // move down
        raw_pos[1] += 16;
        offset[1] = -16;
    }
}

if(key_A){
    // interact
}

if(key_B){
    // stat menu
    status = 1;
}

}

}

// stat menu
else if(status == 1){

if(key_B){
    // close menu
    status = 0;
}

if(key_up_pressed){
    if(leader &gt; 0){
        leader -= 1;
    }else{
        leader = 2;
    }
}

if(key_down_pressed){
    if(leader &lt; 2){
        leader += 1;
    }else{
        leader = 0;
    }
}

}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interpolate

// offets
if(offset[0] != 0){
    if(offset[0] &gt; 0){
        offset[0] -= 1;
    }else if(offset[0] &lt; 0){
        offset[0] += 1;
    }
}
if(offset[1] != 0){
    if(offset[1] &gt; 0){
        offset[1] -= 1;
    }else if(offset[1] &lt; 0){
        offset[1] += 1;
    }
}

// set pos values
x = raw_pos[0] + offset[0];
y = raw_pos[1] + offset[1];

// animate the sprite
if(image_temp &lt; 6){
    image_temp += 1;
}else{
    image_temp = 0;
    if(image &lt; 1){
        image += 1;
    }else{
        image = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing things

// leader
draw_sprite(sprite_index,image+(2*pose)+6+9*(leader),x,y);

// stat menu
if(status == 1){
    var v_o_x = view_xview[0];
    var v_o_y = view_yview[0];
    // corners
    draw_sprite(spr_PNC_MessageBox,0,v_o_x,v_o_y);
    draw_sprite(spr_PNC_MessageBox,1,v_o_x+72,v_o_y);
    draw_sprite(spr_PNC_MessageBox,2,v_o_x+72,v_o_y+88);
    draw_sprite(spr_PNC_MessageBox,3,v_o_x,v_o_y+88);
    draw_sprite(spr_PNC_MessageBox,0,v_o_x+80,v_o_y);
    draw_sprite(spr_PNC_MessageBox,1,v_o_x+120,v_o_y);
    draw_sprite(spr_PNC_MessageBox,2,v_o_x+120,v_o_y+88);
    draw_sprite(spr_PNC_MessageBox,3,v_o_x+80,v_o_y+88);
    // sides
    for(var i=0; i&lt;12; i++){
        if(i&lt;8){
        draw_sprite(spr_PNC_MessageBox,6,v_o_x+8*(i+1),v_o_y);
        draw_sprite(spr_PNC_MessageBox,7,v_o_x+8*(i+1),v_o_y+88);
        }else{
        draw_sprite(spr_PNC_MessageBox,6,v_o_x+8*(i+2)+8,v_o_y);
        draw_sprite(spr_PNC_MessageBox,7,v_o_x+8*(i+2)+8,v_o_y+88);
        }
    }
    for(var i=0; i&lt;10; i++){
        draw_sprite(spr_PNC_MessageBox,4,v_o_x,v_o_y+8*(i+1));
        draw_sprite(spr_PNC_MessageBox,5,v_o_x+72,v_o_y+8*(i+1));
        draw_sprite(spr_PNC_MessageBox,4,v_o_x+80,v_o_y+8*(i+1));
        draw_sprite(spr_PNC_MessageBox,5,v_o_x+120,v_o_y+8*(i+1));
    }
    // fill
    draw_set_color(c_black);
    draw_rectangle(v_o_x+8,v_o_y+8,v_o_x+72,v_o_y+88,false);
    draw_rectangle(v_o_x+88,v_o_y+8,v_o_x+120,v_o_y+88,false);
    draw_set_color(c_white);
    // text
    var fnt = font_add_sprite(spr_PNC_Font,ord(' '),false,0);
    draw_set_font(fnt);
    // stuff that doesn't change
    draw_text(v_o_x+88,v_o_y+8,"LEAD");
    draw_text(v_o_x+8,v_o_y+32,"HP");
    draw_text(v_o_x+8,v_o_y+48,"ATTACK");
    draw_text(v_o_x+8,v_o_y+64,"DEFENSE");
    draw_sprite(spr_Neko_OW,0,v_o_x+104,v_o_y+16);
    draw_sprite(spr_Neko_OW,1,v_o_x+104,v_o_y+40);
    draw_sprite(spr_Neko_OW,2,v_o_x+104,v_o_y+64);
    // stuff that changes
    if(leader == 0){
        draw_text(v_o_x+8,v_o_y+8,"LUCCA");
    }else if(leader == 1){
        draw_text(v_o_x+8,v_o_y+8,"AVION");
    }else{
        draw_text(v_o_x+8,v_o_y+8,"BAZZA");
    }// 24,24
    draw_text(v_o_x+8,v_o_y+40,string(OmniNeko.party_stats[leader,0])+"/"+string(OmniNeko.party_stats[leader,3]));
    draw_text(v_o_x+8,v_o_y+56,string(OmniNeko.party_stats[leader,1]));
    draw_text(v_o_x+8,v_o_y+72,string(OmniNeko.party_stats[leader,2]));
    draw_sprite(spr_Neko_OW,leader,v_o_x+24,v_o_y+16);
    draw_sprite(spr_PNC_MessageBox,10,v_o_x+88,v_o_y+24*(1+leader));
    font_delete(fnt);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
