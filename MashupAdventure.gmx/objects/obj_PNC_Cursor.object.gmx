<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PNC_Cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move the cursor

if(key_left &amp;&amp; x &gt; 0){
    x -= 1;
}
if(key_right &amp;&amp; x &lt; view_wview[0]-sprite_get_width(sprite_index)){
    x += 1;
}
if(key_up &amp;&amp; y &gt; 0){
    y -= 1;
}
if(key_down &amp;&amp; y &lt; view_hview[0]-sprite_get_height(sprite_index)){
    y += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_PNC_Collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// *clicks furiously on TV*
if(key_A){
    // 'click'
    var ind = 0;
    switch(other.obj){
        case "games": ind = 1; break;
        case "tv":
            if(obj_PNC_Control.times_tv_clicked == 0){
                ind = 2;
            }else if(obj_PNC_Control.times_tv_clicked == 1){
                ind = 9;
            }else if(obj_PNC_Control.times_tv_clicked == 2){
                ind = 10;
            }else if(obj_PNC_Control.times_tv_clicked &lt; 99){
                ind = 11;
            }else{
                ind = 12;
            }
            if(obj_PNC_Control.times_tv_clicked &lt; 99){
                obj_PNC_Control.times_tv_clicked += 1;
            }
        break;
        case "drawer":
            ind = 3;
            obj_PNC_Control.drawer_open = true;
            other.obj = "controller"
        break;
        case "console":
            if(obj_PNC_Control.controller_taken){
                // start the game!
                obj_PNC_Control.tv_on = true;
                ind = 13;
            }else{
                ind = 4;
            }
            break;
        case "stairs":
            if(game_beaten){
                ind = 8;
            }else{
                ind = 5;
            }
        break;
        case "controller":
            ind = 6;
            obj_PNC_Control.controller_taken = true;
            with(other){
                instance_destroy();
            }
        break;
    }
    add_message(obj_PNC_Control.messages[ind]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw the cursor
if(!obj_PNC_Control.tv_on){
    shader_set(Outline);
    var tempid = shader_get_uniform(Outline,"in_Colour_actual");
    var pixelW = shader_get_uniform(Outline,"pixelW");
    var pixelH = shader_get_uniform(Outline,"pixelH");
    //var spacing = shader_get_uniform(Scanline,"spacing");
    shader_set_uniform_f(tempid,10.0,182.0,83.0,1.0);
    shader_set_uniform_f(pixelW,texture_get_texel_width(sprite_get_texture(sprite_index,0)));
    shader_set_uniform_f(pixelH,texture_get_texel_height(sprite_get_texture(sprite_index,0)));
    //shader_set_uniform_f(spacing,1.0);
    draw_sprite(spr_PNC_Cursor,0,view_xview[0]+x,view_yview[0]+y);
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
