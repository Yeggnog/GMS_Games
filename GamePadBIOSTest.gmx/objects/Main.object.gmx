<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initalize the world
bgScroll = 0;
stickL_h = 0;
stickL_v = 0;
stickL_mag = 0;
stickL_angle = 0;
stickR_h = 0;
stickR_v = 0;
stickR_mag = 0;
stickR_angle = 0;
slots[0] = false;
x = 2;
y = 2;
fnt_custom = 0;
//test for available gamepads
/*for(i=0; i&lt;gamepad_get_device_count(); i++;){
    if(gamepad_is_connected(i)) slots[i] = true;
    else slots[i] = false;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//test for available gamepads
/*for(i=0; i&lt;gamepad_get_device_count(); i++;){
    if(gamepad_is_connected(i)) slots[i] = true;
    else slots[i] = false;
}*/
//set values for all necessary buttons
//for(i=0; i&lt;array_length_1d(slots); i++;){
    //if(slots[i] = true){
        //update buttons
        if(gp_stickl){
        stickL_h = gamepad_axis_value(0,gp_axislh);
        stickL_v = gamepad_axis_value(0,gp_axislv);
        stickL_mag = sqrt(power(stickL_h, 2)+power(stickL_v, 2));
        }else if(stickL_mag &gt; 0){
        if(stickL_mag &gt;= 1) stickL_mag -= 1;
        else stickL_mag = 0;
        }else if(stickL_mag &lt; 0){
        if(stickL_mag &lt;= -1) stickL_mag += 1;
        else stickL_mag = 0;
        }
        if(gp_stickr){
        stickR_h = gamepad_axis_value(0,gp_axisrh);
        stickR_v = gamepad_axis_value(0,gp_axisrv);
        stickR_mag = sqrt(power(stickR_h, 2)+power(stickR_v, 2));
        }else if(stickR_mag &gt; 0){
        if(stickR_mag &gt;= 1) stickR_mag -= 1;
        else stickR_mag = 0;
        }else if(stickR_mag &lt; 0){
        if(stickR_mag &lt;= -1) stickR_mag += 1;
        else stickR_mag = 0;
        }
    //}
//}
//do trig based on stick inputs
if(stickL_h != 0){
    //stickL_angle = darctan(stickL_v/stickL_h);
    stickL_angle = point_direction(0,0,stickL_h,stickL_v);
    /*if(stickL_h &lt; 0){
        if(stickL_v &lt; 0){
        stickL_angle += 180;
        }else if(stickL_v &gt; 0){
        stickL_angle = 180-stickL_angle;
        }
    }else if(stickL_h &gt; 0){
        if(stickL_v &lt; 0){
        stickL_angle = 360-stickL_angle;
        }
    }*/
}
if(stickR_h != 0){
    //stickR_angle = darctan(stickR_v/stickR_h)
    stickR_angle = point_direction(0,0,stickR_h,stickR_v);
    /*if(stickR_h &lt; 0){
        if(stickR_v &lt; 0){
        stickR_angle += 180;
        }else if(stickR_v &gt; 0){
        stickR_angle = 180-stickR_angle;
        }
    }else if(stickR_h &gt; 0){
        if(stickR_v &lt; 0){
        stickR_angle = 360-stickR_angle;
        }
    }*/
}
//update background
if(bgScroll &lt; 16){
    bgScroll += 1;
}else{
    bgScroll = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set up text
fnt_custom = font_add_sprite(sprite1,ord(" "),true,1);
draw_set_font(fnt_custom);
//draw background
draw_sprite_tiled(sprite2,0,view_xview[0]-bgScroll,view_yview[0]+bgScroll);
//draw drop shadow for controller
draw_sprite_ext(sprite0,0,x+4,y+4,1,1,0,c_black,0.5);
//draw controller template
draw_sprite(sprite0,1,x,y);
//draw analog sticks based on trig
    //left stick
        //pressed
        if(stickL_h != 0 &amp;&amp; stickL_v != 0)draw_sprite_part(sprite0,3,0,0,13,13,x+(16+lengthdir_x(stickL_mag*STICK_RANGE,stickL_angle)),y+(8+lengthdir_y(stickL_mag*STICK_RANGE,stickL_angle)));
        //not pressed
        else draw_sprite_part(sprite0,3,0,16,13,13,x+(16+lengthdir_x(stickL_mag*STICK_RANGE,stickL_angle)),y+(8+lengthdir_y(stickL_mag*STICK_RANGE,stickL_angle)));
    //right stick
        //pressed
        if(stickR_h != 0 &amp;&amp; stickR_v != 0) draw_sprite_part(sprite0,3,0,0,13,13,x+(50+lengthdir_x(stickR_mag*STICK_RANGE,stickR_angle)),y+(22+lengthdir_y(stickR_mag*STICK_RANGE,stickR_angle)));
        //not pressed
        else draw_sprite_part(sprite0,3,0,16,13,13,x+(50+lengthdir_x(stickR_mag*STICK_RANGE,stickR_angle)),y+(22+lengthdir_y(stickR_mag*STICK_RANGE,stickR_angle)));
//draw d-pad
    //left
    if(gamepad_button_check(0,gp_padl)) draw_sprite_part(sprite0,3,65,0,4,13,x+28,y+22);
    //up
    if(gamepad_button_check(0,gp_padu)) draw_sprite_part(sprite0,3,67,0,13,4,x+30,y+22);
    //right
    if(gamepad_button_check(0,gp_padr)) draw_sprite_part(sprite0,3,77,0,4,13,x+38,y+22);
    //down
    if(gamepad_button_check(0,gp_padd)) draw_sprite_part(sprite0,3,67,10,13,4,x+30,y+32);
//draw shoulder buttons
    //left bumper
    if(gamepad_button_check(0,gp_shoulderl)) draw_sprite_part(sprite0,3,46,0,18,5,x+16,y);
    //left trigger
    if(gamepad_button_check(0,gp_shoulderrb)) draw_sprite_part(sprite0,3,37,0,8,13,x+54,y+43);
    //right bumper
    if(gamepad_button_check(0,gp_shoulderr)) draw_sprite_part(sprite0,3,46,6,18,5,x+58,y);
    //right trigger
    if(gamepad_button_check(0,gp_shoulderlb)) draw_sprite_part(sprite0,3,28,0,8,13,x+30,y+43);
//draw face buttons
    //A
    if(gamepad_button_check(0,gp_face1)) draw_sprite_part(sprite0,3,14,3,7,7,x+66,y+18);
    //X
    if(gamepad_button_check(0,gp_face3)) draw_sprite_part(sprite0,3,14,3,7,7,x+59,y+11);
    //B
    if(gamepad_button_check(0,gp_face2)) draw_sprite_part(sprite0,3,14,3,7,7,x+73,y+11);
    //Y
    if(gamepad_button_check(0,gp_face4)) draw_sprite_part(sprite0,3,14,3,7,7,x+66,y+4);
    //start
    if(gamepad_button_check(0,gp_start)) draw_sprite_part(sprite0,3,22,4,5,5,x+52,y+12);
    //back
    if(gamepad_button_check(0,gp_select)) draw_sprite_part(sprite0,3,22,4,5,5,x+34,y+12);
//draw other stats
draw_text(x,y+62,"AXISL:  AXISR:");
draw_set_color(make_color_rgb(56,112,112));
draw_circle(x+37,y+65,4,false);
draw_circle(x+82,y+65,4,false);
draw_set_color(c_black);
draw_line_width(x+37,y+65,x+(37+lengthdir_x(4,stickL_angle)), y+(65+lengthdir_y(4,stickL_angle)), 1);
draw_line_width(x+82,y+65,x+(82+lengthdir_x(4,stickR_angle)), y+(65+lengthdir_y(4,stickR_angle)), 1);
//delete font to prevent memory leaks
font_delete(fnt_custom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
