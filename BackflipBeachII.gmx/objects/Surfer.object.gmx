<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init_scr
vp = 0;
hp = 0;

wipes = 0; wiped = 0;
flips = 0; mult = 0; subpts = 0;
winning = 0;
pts = 0;
facing = 180;
bouncing = 0;
markerx = 67;
globalvar paused; paused = 0;
globalvar pointval;
globalvar timeleft; timeleft = 1568;
storedindex = 0;
jumpup = 0;
animbuffer = 0;
alarmbuffer = 0;
/*
globalvar Normal_Font;
Normal_Font = font_add_sprite(Text_Layer_1, ord(" "), true, 2);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarmbuffer = 0;
if(wiped = 1){
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpup</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gravity and trail handling
if(paused = 0)
{
    //push out
    //if(place_meeting(x,y,solid_collision) &amp;&amp; facing = 0){
    //x -= 1;
    //}
    //if(place_meeting(x,y,solid_collision) &amp;&amp; facing = 180){
    //x += 1;
    //}
    //gravity
    if(!place_meeting(x,y,solid_collision) &amp;&amp; !place_meeting(x,y+vp,solid_collision)){
    vp += .4;
    jumping = 0;
    }else{
    vp = 0;
    }
    //collision
    if(!place_meeting(x,y+vp,solid_collision) &amp;&amp; !place_meeting(x,y+vp,object4)){
    y += vp;
    }
    else{
    for(i=vp; !place_meeting(x,y+i,solid_collision)&amp;&amp;!place_meeting(x,y+i,object4); i-=.1){
        y += vp;
    }
    if(place_meeting(x,y+vp,solid_collision) || place_meeting(x,y+vp,object4)){
        vp = 0;
        image_speed = 1;
        if(winning != true){
    if(sprite_index = sprite3){
        if(image_index &gt;= 2 &amp;&amp; image_index &lt;= 6){
        wiped = 1;
        if(alarmbuffer = 0){
        alarmbuffer = 1;
        alarm[1] = 60;
        }
        instance_create(x,y+3,object8);
        if(!instance_exists(Board)){
            instance_create(x,y+3,Board);
        }
        }
    }
    if(sprite_index = sprite4){
        if(image_index &gt;= 1 &amp;&amp; image_index &lt;= 5){
        wiped = 1;
        if(alarmbuffer = 0){
        alarmbuffer = 1;
        alarm[1] = 30;
        }
        instance_create(x,y+3,object8);
        if(!instance_exists(Board)){
            instance_create(x,y+3,Board);
        }
        }
    }
    sprite_index = sprite2;
    animbuffer = 0;
    bouncing = 0;
        if(subpts != 0 &amp;&amp; wiped = 0){
        mult = flips;
        flips = 0;
        pts += (subpts*mult);
        pointval = (subpts*mult);
        subpts = 0;
        mult = 0;
        instance_create(x,y,text);
        }
    }
    }
    }
//outdated code lol
/*
if(!place_meeting(hp,0,solid_collision))
{
x += hp;
show_debug_message("HP updated, should be working");
}
else
{
if(hp &lt; 0)
{
hp += 1;
}
if(hp &gt; 0)
{
hp -= 1;
}
}
*/

    //timer
    if(timeleft &gt; 0){
    timeleft -= 1;
        if(timeleft mod 32 = 0 &amp;&amp; markerx &gt; 18){
        markerx -= 1;
        }
    }else if(timeleft = 0 &amp;&amp; !instance_exists(levelend) &amp;&amp; !instance_exists(level_end_menu)){
    storedindex = instance_create(view_xview[0], view_yview[0]+64, level_end_menu); //32
    }

    //x and y pos update
    play_xpos = x;
    play_ypos = y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard input
if(winning = 0){
if(keyboard_check_pressed(controls_keyboard[2]) || keyboard_check_pressed(vk_up)){
    //jump_scr
    if (place_meeting(x,y+16,solid_collision) &amp;&amp; vp = 0 &amp;&amp; paused = 0)
    {
    vp = -6;
    jumpup = 1;
    if(!instance_exists(Board)){
    instance_create(x,y+3,Board);
    }
    sprite_index = sprite5;
    alarm[0] = 10;
    }
}
if(keyboard_check(controls_keyboard[0]) || keyboard_check(vk_left)){
    //lean forward
    facing = 180;
    if(animbuffer &lt; 70){
        animbuffer += 5;
    }
    animUpdate(facing, animbuffer, bouncing, flips);
}
if(keyboard_check(controls_keyboard[1]) || keyboard_check(vk_right)){
    //lean backward
    facing = 0;
    if(animbuffer &lt; 70){
        animbuffer += 5;
    }
    animUpdate(facing, animbuffer, bouncing, flips);
}
if(keyboard_check_pressed(controls_keyboard[6]) &amp;&amp; wiped = 1
&amp;&amp; !instance_exists(levelend) &amp;&amp; !instance_exists(level_end_menu)){
    //"skip to the end" button
    wiped = 0;
    timeleft = 0;
    //instance_create(x, y, levelend);
}
}
/*
if place_free(x+hp,y) {
    x+=hp;
    if place_meeting(x,y+maximum_downangle+1,object4) {
        move_contact_solid(270,maximum_downangle);
    }
} else {
    if place_free(x+hp,y-maximum_upangle) {
        x+=hp;
        y-=maximum_upangle;
        move_contact_solid(270,maximum_upangle);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Board">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(jumpup = 0 &amp;&amp; wiped = 0){
    with other {instance_destroy();}
    sprite_index = sprite2;
    image_speed = 0;
    image_index = 0;
    bouncing = 1;
    if(other.vp != 0){
    vp = -5;
    flips ++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(place_meeting(x+1,y,object4)){
y -= 1;
}
sprite_index = sprite3;
image_speed = 0;
image_index = 0;
    if(sprite_index = sprite3){
        if(image_index &gt;= 2 &amp;&amp; image_index &lt;= 6){
        wiped = 1;
        instance_create(x,y+3,object8);
        if(!instance_exists(Board)){
            instance_create(x,y+3,Board);
        }
        }
    }
    if(sprite_index = sprite4){
        if(image_index &gt;= 1 &amp;&amp; image_index &lt;= 5){
        wiped = 1;
        instance_create(x,y+3,object8);
        if(!instance_exists(Board)){
            instance_create(x,y+3,Board);
        }
        }
    }
bouncing = 1;
vp = -5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI and oneself :|

//beach in BG
if(instance_exists(level_end_menu)){
    if(storedindex.progress &lt; 3){
        draw_sprite(sprite9, 0, view_xview[0]-storedindex.xval, view_yview[0]);
    }
}
draw_sprite(sprite9,8,view_xview[0],view_yview[0]);
//oneself
if(wiped = 0){
    draw_self();
}
//landing angle gague
draw_sprite(sprite13,6,x+lengthdir_x(16, 360*(animbuffer/70)),y+lengthdir_y(16, 360*(animbuffer/70)));
for(var i=0; i&lt;90; i+=10){
    if(i+10 &lt;= 90){
        draw_line_width(x+lengthdir_x(16,(225+i)), y+lengthdir_y(16,(225+i)), x+lengthdir_x(16,(235+i))+1, y+lengthdir_y(16,(235+i)), 4);
        draw_set_color(c_aqua);
        draw_line_width(x+lengthdir_x(16,(225+i)), y+lengthdir_y(16,(225+i)), x+lengthdir_x(16,(235+i))+1, y+lengthdir_y(16,(235+i)), 2);
        draw_set_colour(make_color_rgb(24,24,24));
        if(i == 0){
        draw_line_width(x+lengthdir_x(14,(225+i)), y+lengthdir_y(14,(225+i)), x+lengthdir_x(18,(225+i)), y+lengthdir_y(18,(225+i)), 1);
        }
        if(i == 80){
        draw_line_width(x+lengthdir_x(14,(235+i)), y+lengthdir_y(14,(235+i)), x+lengthdir_x(18,(235+i)), y+lengthdir_y(18,(235+i)), 1);
        }
    }
}

//set up
fnt = font_add_sprite(sprite13, ord(" "), true, 1);
draw_set_font(fnt);
draw_set_colour(make_color_rgb(24,24,24));

//score counter
draw_text(view_xview[0]+4, view_yview[0]+4, "SCORE:");
draw_text(view_xview[0]+4, view_yview[0]+12, string(pts));

//map
draw_sprite(sprite15, 0, view_xview[0]+46, view_yview[0]+4);
draw_sprite(sprite16, 0, view_xview[0]+(46+markerx), view_yview[0]+13);

//combo counter
draw_text(view_xview[0]+48+sprite_get_width(sprite15), view_yview[0]+4, "COMBO");
if(flips != 0){
draw_text(view_xview[0]+56+sprite_get_width(sprite15), view_yview[0]+12, "X"+string(flips));
}

//game over text
if(wiped = 1){
draw_text(view_xview[0]+8, view_yview[0]+24, "GAME OVER. RESTARTING...# PRESS SPACE TO SKIP.");
}
font_delete(fnt);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
