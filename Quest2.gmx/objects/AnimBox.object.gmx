<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--------[Object: textBox]--------
// designed to be a variable system to be used for all types of text boxes
// uses sprite spr_textBox = (0[NW] 1[NE] 2[SE] 3[SW] 4[V] 5[H] 6[ ] 7[v] 8[&gt;])
//----[Event: create]----

//variables (width and height in units of 8x8 tiles)
alarm[0] = 1;
opening = true;
width = 12;
height = 6;
col = 0;
sibling = -1;
depth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//edit for opening / closing
if(opening == false){
    col = targetw;
}else{
    col = 0;
}
//constrain the box
// keep from going off the screen
if(((x/UI_TILE_SIZE) + width) &gt; SCREEN_WIDTH){
    width = SCREEN_WIDTH - (x/UI_TILE_SIZE);
}
if(((y/UI_TILE_SIZE) + height) &gt; SCREEN_HEIGHT){
    height = SCREEN_HEIGHT - (y/UI_TILE_SIZE);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// update col
if(opening == true){
    if(col &lt; (width+height-1)){
        col += 1;
    }else{
        // new text box
        instance_activate_object(sibling);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw box
for(var i=0; i&lt;col; i++){
    for(var j=0; j&lt;col-i; j++){
        if(i &lt;= width &amp;&amp; j &lt;= height){
            if(i == 0){
                if(j == 0){draw_sprite(spr_textBox,0,x,y);}
                else if(j == height){draw_sprite(spr_textBox,3,x,y+(j*UI_TILE_SIZE));}
                else{draw_sprite(spr_textBox,4,x,y+(j*UI_TILE_SIZE));}
            }else if(i == width){
                if(j == 0){draw_sprite(spr_textBox,1,x+(i*UI_TILE_SIZE),y);}
                else if(j == height){draw_sprite(spr_textBox,2,x+(i*UI_TILE_SIZE),y+(j*UI_TILE_SIZE));}
                else{draw_sprite(spr_textBox,4,x+(i*UI_TILE_SIZE),y+(j*UI_TILE_SIZE));}
            }else{
                if(j == 0){draw_sprite(spr_textBox,5,x+(i*UI_TILE_SIZE),y);}
                else if(j == height){draw_sprite(spr_textBox,5,x+(i*UI_TILE_SIZE),y+(j*UI_TILE_SIZE));}
                else{draw_sprite(spr_textBox,6,x+(i*UI_TILE_SIZE),y+(j*UI_TILE_SIZE));}
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
