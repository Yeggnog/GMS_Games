<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>AbstractTextBox</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//----[Event: create]----

//variables (width and height in units of 8x8 tiles)
focused = id;
width = 38;
height = 10;
depth = 0;
rawText = "";
title = "FIGHTA";
var exploretemp = 1;
displaysize = 0;
fillLine = 0;
ancestor = -1;
endparams[0] = -1; //mark as not creating another (0 for MessageBox and 1 for OptionBox)
alarm[0] = 2;

//fix height if it's odd
if(height%2 != 0){
    height += 1;
}
//initialize display lines
while(exploretemp &lt; (height-1)){
    if(height - exploretemp &gt; 2){
        exploretemp += 2;
        displaysize += 1;
    }
}
for(var i=0; i&lt;displaysize; i++){
    display[i] = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fix height if it's odd
if(height%2 != 0){
    height += 1;
}

//constrain the box
// keep from going off the screen
if(((x/UI_TILE_SIZE) + width) &gt; SCREEN_WIDTH){
    width = SCREEN_WIDTH - (x/UI_TILE_SIZE);
}
if(((y/UI_TILE_SIZE) + height) &gt; SCREEN_HEIGHT){
    height = SCREEN_HEIGHT - (y/UI_TILE_SIZE);
}
// keep within normal bounds:
// - min width/height for a MessageBox is &lt;3,3&gt;
if(width &lt; 3){
    width = 3;
}
if(height &lt; 3){
    height = 3;
}
//constrain the title
if(string_length(title) &gt; (width-3)){
    title = string_copy(title, 1, width-3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(focused == id){

if(keyboard_check_pressed(vk_enter)){
    if(string_length(rawText) &gt; 1){
        if(fillLine &lt; displaysize){
            display[fillLine] = rbParse(id, rawText, width-2);
            fillLine += 1;
        }else{
            for(var i=0; i&lt;array_length_1d(display)-1; i++){
                display[i] = display[i+1];
            }
            fillLine -= 1;
            display[fillLine] = rbParse(id, rawText, width-2);
        }
    }else{
        //*Close animation goes here*
        // new anim box
        ds_list_delete(GlobalControl.boxes, ds_list_find_index(GlobalControl.boxes,id));
        if(ancestor != -1){
            temp.ancestor = ancestor;
        }
        if(endparams[0] != -1){
            if(endparams[0] == 0){
                // newMessageBox();
            }else{
                // newOptionBox();
            }
        }
        instance_destroy();
    }
}
if(mouse_check_button_pressed(mb_right)){
    var temp = getExchangeFromFile("Dialogues",1);
    newMessageBox(x+UI_TILE_SIZE,y+UI_TILE_SIZE,width,height,"WAT",temp);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//----[Event: draw]----
//set color
draw_set_color(c_black);
//draw_box background
draw_rectangle(x,y,x+(width*UI_TILE_SIZE),y+(height*UI_TILE_SIZE),false);
//reset color
draw_set_color(c_white);
//draw corners
draw_sprite(spr_textBox,0,x,y);
draw_sprite(spr_textBox,3,x,y+(height-1)*UI_TILE_SIZE);
draw_sprite(spr_textBox,1,x+(width-1)*UI_TILE_SIZE,y);
draw_sprite(spr_textBox,2,x+(width-1)*UI_TILE_SIZE,y+(height-1)*UI_TILE_SIZE);
    //add remaining outline
    for(i=1; i&lt;width-1; i++){
    draw_sprite(spr_textBox,5,x+(i*UI_TILE_SIZE),y+(height-1)*UI_TILE_SIZE);
    draw_sprite(spr_textBox,6,x+(i*UI_TILE_SIZE),y);
    }
    for(i=1; i&lt;height-1; i++){
    draw_sprite(spr_textBox,4,x+(width-1)*UI_TILE_SIZE,y+(i*UI_TILE_SIZE));
    draw_sprite(spr_textBox,4,x,y+(i*UI_TILE_SIZE));
    }
    if(string_length(rawText) &gt; 0){
        draw_sprite(spr_textBox, 7, x+((width/2)+1)*UI_TILE_SIZE, y+(height-1)*UI_TILE_SIZE);
    }
    //initialize font
    fnt_monospace = font_add_sprite(spr_font, ord(" "), false, 0);
    draw_set_font(fnt_monospace);
    //add title
    draw_text(x+(2*UI_TILE_SIZE), y, title);
    draw_sprite(spr_textBox,5,x+UI_TILE_SIZE,y);
    if(width-string_length(title) &gt; 3){
        for(i=1; i&lt;(width-string_length(title)-1); i++){
        draw_sprite(spr_textBox,5,x+((i+string_length(title))*UI_TILE_SIZE),y);
        }
    }
    //draw text
    for(i=0; i&lt;array_length_1d(display); i++){
        draw_text(x+UI_TILE_SIZE,y+(UI_TILE_SIZE*(i+1)*2),display[i]);
    }
    font_delete(fnt_monospace);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
