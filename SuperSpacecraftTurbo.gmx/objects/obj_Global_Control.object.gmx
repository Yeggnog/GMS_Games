<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the game

//[code for the main menu goes here]

//set up the player state
HP = 6;
HP_temp = 0;
Max_HP = 6;
BossHP = -1;
BossHP_temp = 0;
anim_index = 0;

//set up movement controls

//[add code here for gamepad controls, assuming the player is prompted for them]

//keyboard mapping(WASD and left mouse in this case)
globalvar key_left;
key_left = ( keyboard_check(ord('A')) || keyboard_check(vk_left) );
key_right = ( keyboard_check(ord('D')) || keyboard_check(vk_right) );
key_up = ( keyboard_check(ord('W')) || keyboard_check(vk_up) );
key_down = ( keyboard_check(ord('S')) || keyboard_check(vk_down) );

key_pause = keyboard_check_pressed(ord('E'));
key_formation = keyboard_check_pressed(vk_lshift);
key_fire = mouse_check_button_pressed(mb_left);
key_dodge = mouse_check_button_pressed(mb_right);

//set up screen ratio(for UI code)
screen_ratio = view_hport[0]/view_hview[0];

//[add code here to initialize the particle system]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//lerp temp variables
//HP
if(HP_temp &lt; HP){
    HP_temp += 1;
}
if(HP_temp &gt; HP){
    HP_temp -= 1;
}
//Boss HP
if(BossHP_temp &lt; BossHP){
    BossHP_temp += 1;
}
if(BossHP_temp &gt; BossHP){
    BossHP_temp -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the UI

//player health bar

//outline(optional)
/*
draw_line(1,(view_hview[0]/4)-2,1,((3*view_hview[0])/4)-2);
draw_line(8,(view_hview[0]/4)-2,8,((3*view_hview[0])/4)-2);
draw_line(2,(view_hview[0]/4)-2,7,(view_hview[0]/4)-2);
draw_line(2,((3*view_hview[0])/4)-2,7,((3*view_hview[0])/4)-2);
*/
draw_set_color(c_green);
draw_rectangle(-2*screen_ratio,((view_hview[0]/4)-2)*screen_ratio,3*screen_ratio,((view_hview[0]*(3/4))-2)*screen_ratio,false);
draw_set_color(c_lime);
draw_rectangle(-2*screen_ratio,((view_hview[0]/4)-2)*screen_ratio,3*screen_ratio,((view_hview[0]*(3/4))-2)*screen_ratio,false);
draw_set_color(c_black);

//boss health bar
draw_set_color(c_blue);
draw_rectangle((view_wview[0]-12)*screen_ratio,((view_hview[0]/4)-2)*screen_ratio,(view_wview[0]-2)*screen_ratio,((view_hview[0]*(3/4))-2)*screen_ratio,false);
draw_set_color(c_aqua);
draw_rectangle((view_wview[0]-6)*screen_ratio,((view_hview[0]/4)-2)*screen_ratio,(view_wview[0]-2)*screen_ratio,((view_hview[0]*(3/4))-2)*screen_ratio,false);
draw_set_color(c_black);

//point total(and font setup)
//reset font to prevent memory leaks
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
