<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set up constants

// engine control
globalvar time_on;
time_on = true;

// input style
input_style = 0; // 0-&gt;Default, 1-&gt;Alternate

// device indeces

// default
dev_ind[0,0] = "K"; // left
dev_ind[1,0] = "K"; // right
dev_ind[2,0] = "K"; // up
dev_ind[3,0] = "K"; // down
dev_ind[4,0] = "K"; // start
dev_ind[5,0] = "K"; // X
dev_ind[6,0] = "K"; // Y
dev_ind[7,0] = "K"; // A
dev_ind[8,0] = "K"; // B
// alternate
dev_ind[0,1] = "K"; // left
dev_ind[1,1] = "K"; // right
dev_ind[2,1] = "K"; // up
dev_ind[3,1] = "K"; // down
dev_ind[4,1] = "K"; // start
dev_ind[5,1] = "M"; // X
dev_ind[6,1] = "M"; // Y
dev_ind[7,1] = "K"; // A
dev_ind[8,1] = "K"; // B

// keyboard
globalvar key_left;
globalvar key_left_pressed;
globalvar key_right;
globalvar key_right_pressed;
globalvar key_up;
globalvar key_up_pressed;
globalvar key_down;
globalvar key_down_pressed;
globalvar key_start;
k_L_D = vk_left;
k_L_A = ord('A');
k_R_D = vk_right;
k_R_A = ord('D');
k_U_D = vk_up;
k_U_A = ord('W');
k_D_D = vk_down;
k_D_A = ord('S');
k_S_D = vk_escape;
k_S_A = ord('E');

// mouse
globalvar key_X;
globalvar key_Y;
globalvar key_A;
globalvar key_B;
k_X_D = ord('J');
k_X_A = mb_right;
k_Y_D = ord('I');
k_Y_A = vk_lshift;
k_A_D = ord('K');
k_A_A = mb_left;
k_B_D = ord('L');
k_B_A = vk_space;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update constants

// temp
var temp;
temp[0] = false;
temp[1] = false;

// default
if(input_style == 0){
    // directions
    
    // normal check
    // Left
    if(dev_ind[0,0] == 'K'){
        key_left = keyboard_check(k_L_D);
    }else if(dev_ind[0,0] == 'M'){
        key_left = mouse_check_button(k_L_D);
    }
    // Right
    if(dev_ind[1,0] == 'K'){
        key_right = keyboard_check(k_R_D);
    }else if(dev_ind[1,0] == 'M'){
        key_right = mouse_check_button(k_R_D);
    }
    // Up
    if(dev_ind[2,0] == 'K'){
        key_up = keyboard_check(k_U_D);
    }else if(dev_ind[2,0] == 'M'){
        key_up = mouse_check_button(k_U_D);
    }
    // Down
    if(dev_ind[3,0] == 'K'){
        key_down = keyboard_check(k_D_D);
    }else if(dev_ind[3,0] == 'M'){
        key_down = mouse_check_button(k_D_D);
    }
    
    // pressed check
    // Left
    if(dev_ind[0,0] == 'K'){
        key_left_pressed = keyboard_check_pressed(k_L_D);
    }else if(dev_ind[0,0] == 'M'){
        key_left_pressed = mouse_check_button_pressed(k_L_D);
    }
    // Right
    if(dev_ind[1,0] == 'K'){
        key_right_pressed = keyboard_check_pressed(k_R_D);
    }else if(dev_ind[1,0] == 'M'){
        key_right_pressed = mouse_check_button_pressed(k_R_D);
    }
    // Up
    if(dev_ind[2,0] == 'K'){
        key_up_pressed = keyboard_check_pressed(k_U_D);
    }else if(dev_ind[2,0] == 'M'){
        key_up_pressed = mouse_check_button_pressed(k_U_D);
    }
    // Down
    if(dev_ind[3,0] == 'K'){
        key_down_pressed = keyboard_check_pressed(k_D_D);
    }else if(dev_ind[3,0] == 'M'){
        key_down_pressed = mouse_check_button_pressed(k_D_D);
    }
    
    // buttons
    // start
    if(dev_ind[4,0] == 'K'){
        key_start = keyboard_check_pressed(k_S_D);
    }else if(dev_ind[4,0] == 'M'){
        key_start = mouse_check_button_pressed(k_S_D);
    }
    // X
    if(dev_ind[5,0] == 'K'){
        key_X = keyboard_check_pressed(k_X_D);
    }else if(dev_ind[5,0] == 'M'){
        key_X = mouse_check_button_pressed(k_X_D);
    }
    // Y
    if(dev_ind[6,0] == 'K'){
        key_Y = keyboard_check_pressed(k_Y_D);
    }else if(dev_ind[6,0] == 'M'){
        key_Y = mouse_check_button_pressed(k_Y_D);
    }
    // A
    if(dev_ind[7,0] == 'K'){
        key_A = keyboard_check_pressed(k_A_D);
    }else if(dev_ind[7,0] == 'M'){
        key_A = mouse_check_button_pressed(k_A_D);
    }
    // B
    if(dev_ind[8,0] == 'K'){
        key_B = keyboard_check_pressed(k_B_D);
    }else if(dev_ind[8,0] == 'M'){
        key_B = mouse_check_button_pressed(k_B_D);
    }
}


// alternate
else if(input_style == 1){
    // directions
    
    // normal check
    // Left
    if(dev_ind[0,1] == 'K'){
        key_left = keyboard_check(k_L_A);
    }else if(dev_ind[0,1] == 'M'){
        key_left = mouse_check_button(k_L_A);
    }
    // Right
    if(dev_ind[1,1] == 'K'){
        key_right = keyboard_check(k_R_A);
    }else if(dev_ind[1,1] == 'M'){
        key_right = mouse_check_button(k_r_A);
    }
    // Up
    if(dev_ind[2,1] == 'K'){
        key_up = keyboard_check(k_U_A);
    }else if(dev_ind[2,1] == 'M'){
        key_up = mouse_check_button(k_U_A);
    }
    // Down
    if(dev_ind[3,1] == 'K'){
        key_down = keyboard_check(k_D_A);
    }else if(dev_ind[3,1] == 'M'){
        key_down = mouse_check_button(k_D_A);
    }
    
    // pressed check
    // Left
    if(dev_ind[0,1] == 'K'){
        key_left_pressed = keyboard_check_pressed(k_L_A);
    }else if(dev_ind[0,1] == 'M'){
        key_left_pressed = mouse_check_button_pressed(k_L_A);
    }
    // Right
    if(dev_ind[1,1] == 'K'){
        key_right_pressed = keyboard_check_pressed(k_R_A);
    }else if(dev_ind[1,1] == 'M'){
        key_right_pressed = mouse_check_button_pressed(k_r_A);
    }
    // Up
    if(dev_ind[2,1] == 'K'){
        key_up_pressed = keyboard_check_pressed(k_U_A);
    }else if(dev_ind[2,1] == 'M'){
        key_up_pressed = mouse_check_button_pressed(k_U_A);
    }
    // Down
    if(dev_ind[3,1] == 'K'){
        key_down_pressed = keyboard_check_pressed(k_D_A);
    }else if(dev_ind[3,1] == 'M'){
        key_down_pressed = mouse_check_button_pressed(k_D_A);
    }
    
    // buttons
    // start
    if(dev_ind[4,1] == 'K'){
        key_start = keyboard_check_pressed(k_S_A);
    }else if(dev_ind[4,1] == 'M'){
        key_start = mouse_check_button_pressed(k_S_A);
    }
    // X
    if(dev_ind[5,1] == 'K'){
        key_X = keyboard_check_pressed(k_X_A);
    }else if(dev_ind[5,1] == 'M'){
        key_X = mouse_check_button_pressed(k_X_A);
    }
    // Y
    if(dev_ind[6,1] == 'K'){
        key_Y = keyboard_check_pressed(k_Y_A);
    }else if(dev_ind[6,1] == 'M'){
        key_Y = mouse_check_button_pressed(k_Y_A);
    }
    // A
    if(dev_ind[7,1] == 'K'){
        key_A = keyboard_check_pressed(k_A_A);
    }else if(dev_ind[7,1] == 'M'){
        key_A = mouse_check_button_pressed(k_A_A);
    }
    // B
    if(dev_ind[8,1] == 'K'){
        key_B = keyboard_check_pressed(k_B_A);
    }else if(dev_ind[8,1] == 'M'){
        key_B = mouse_check_button_pressed(k_B_A);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_Battle_Control)){
    if(obj_Battle_Control.wait_for_input){
        // fill with combatants
        var ind = instance_create(x,y,obj_Player_Fighter);
        // set fighter values here
        ds_list_add(obj_Battle_Control.fighters,ind);
        obj_Battle_Control.wait_for_input = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
